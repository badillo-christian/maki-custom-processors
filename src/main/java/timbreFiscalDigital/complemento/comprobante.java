/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package timbreFiscalDigital.complemento;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"timbreFiscalDigital.complemento\",\"fields\":[{\"name\":\"fechaTimbrado\",\"type\":\"string\"},{\"name\":\"noCertificadoSAT\",\"type\":\"string\"},{\"name\":\"UUID\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence fechaTimbrado;
  @Deprecated public java.lang.CharSequence noCertificadoSAT;
  @Deprecated public java.lang.CharSequence UUID;
  @Deprecated public int version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public comprobante() {}

  /**
   * All-args constructor.
   */
  public comprobante(java.lang.CharSequence fechaTimbrado, java.lang.CharSequence noCertificadoSAT, java.lang.CharSequence UUID, java.lang.Integer version) {
    this.fechaTimbrado = fechaTimbrado;
    this.noCertificadoSAT = noCertificadoSAT;
    this.UUID = UUID;
    this.version = version;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fechaTimbrado;
    case 1: return noCertificadoSAT;
    case 2: return UUID;
    case 3: return version;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fechaTimbrado = (java.lang.CharSequence)value$; break;
    case 1: noCertificadoSAT = (java.lang.CharSequence)value$; break;
    case 2: UUID = (java.lang.CharSequence)value$; break;
    case 3: version = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fechaTimbrado' field.
   */
  public java.lang.CharSequence getFechaTimbrado() {
    return fechaTimbrado;
  }

  /**
   * Sets the value of the 'fechaTimbrado' field.
   * @param value the value to set.
   */
  public void setFechaTimbrado(java.lang.CharSequence value) {
    this.fechaTimbrado = value;
  }

  /**
   * Gets the value of the 'noCertificadoSAT' field.
   */
  public java.lang.CharSequence getNoCertificadoSAT() {
    return noCertificadoSAT;
  }

  /**
   * Sets the value of the 'noCertificadoSAT' field.
   * @param value the value to set.
   */
  public void setNoCertificadoSAT(java.lang.CharSequence value) {
    this.noCertificadoSAT = value;
  }

  /**
   * Gets the value of the 'UUID' field.
   */
  public java.lang.CharSequence getUUID() {
    return UUID;
  }

  /**
   * Sets the value of the 'UUID' field.
   * @param value the value to set.
   */
  public void setUUID(java.lang.CharSequence value) {
    this.UUID = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /** Creates a new comprobante RecordBuilder */
  public static timbreFiscalDigital.complemento.comprobante.Builder newBuilder() {
    return new timbreFiscalDigital.complemento.comprobante.Builder();
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing Builder */
  public static timbreFiscalDigital.complemento.comprobante.Builder newBuilder(timbreFiscalDigital.complemento.comprobante.Builder other) {
    return new timbreFiscalDigital.complemento.comprobante.Builder(other);
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing comprobante instance */
  public static timbreFiscalDigital.complemento.comprobante.Builder newBuilder(timbreFiscalDigital.complemento.comprobante other) {
    return new timbreFiscalDigital.complemento.comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<comprobante>
    implements org.apache.avro.data.RecordBuilder<comprobante> {

    private java.lang.CharSequence fechaTimbrado;
    private java.lang.CharSequence noCertificadoSAT;
    private java.lang.CharSequence UUID;
    private int version;

    /** Creates a new Builder */
    private Builder() {
      super(timbreFiscalDigital.complemento.comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(timbreFiscalDigital.complemento.comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fechaTimbrado)) {
        this.fechaTimbrado = data().deepCopy(fields()[0].schema(), other.fechaTimbrado);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.noCertificadoSAT)) {
        this.noCertificadoSAT = data().deepCopy(fields()[1].schema(), other.noCertificadoSAT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.UUID)) {
        this.UUID = data().deepCopy(fields()[2].schema(), other.UUID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing comprobante instance */
    private Builder(timbreFiscalDigital.complemento.comprobante other) {
            super(timbreFiscalDigital.complemento.comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.fechaTimbrado)) {
        this.fechaTimbrado = data().deepCopy(fields()[0].schema(), other.fechaTimbrado);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.noCertificadoSAT)) {
        this.noCertificadoSAT = data().deepCopy(fields()[1].schema(), other.noCertificadoSAT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.UUID)) {
        this.UUID = data().deepCopy(fields()[2].schema(), other.UUID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'fechaTimbrado' field */
    public java.lang.CharSequence getFechaTimbrado() {
      return fechaTimbrado;
    }
    
    /** Sets the value of the 'fechaTimbrado' field */
    public timbreFiscalDigital.complemento.comprobante.Builder setFechaTimbrado(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.fechaTimbrado = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fechaTimbrado' field has been set */
    public boolean hasFechaTimbrado() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fechaTimbrado' field */
    public timbreFiscalDigital.complemento.comprobante.Builder clearFechaTimbrado() {
      fechaTimbrado = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'noCertificadoSAT' field */
    public java.lang.CharSequence getNoCertificadoSAT() {
      return noCertificadoSAT;
    }
    
    /** Sets the value of the 'noCertificadoSAT' field */
    public timbreFiscalDigital.complemento.comprobante.Builder setNoCertificadoSAT(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.noCertificadoSAT = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'noCertificadoSAT' field has been set */
    public boolean hasNoCertificadoSAT() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'noCertificadoSAT' field */
    public timbreFiscalDigital.complemento.comprobante.Builder clearNoCertificadoSAT() {
      noCertificadoSAT = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'UUID' field */
    public java.lang.CharSequence getUUID() {
      return UUID;
    }
    
    /** Sets the value of the 'UUID' field */
    public timbreFiscalDigital.complemento.comprobante.Builder setUUID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.UUID = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'UUID' field has been set */
    public boolean hasUUID() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'UUID' field */
    public timbreFiscalDigital.complemento.comprobante.Builder clearUUID() {
      UUID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public java.lang.Integer getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public timbreFiscalDigital.complemento.comprobante.Builder setVersion(int value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'version' field */
    public timbreFiscalDigital.complemento.comprobante.Builder clearVersion() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public comprobante build() {
      try {
        comprobante record = new comprobante();
        record.fechaTimbrado = fieldSetFlags()[0] ? this.fechaTimbrado : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.noCertificadoSAT = fieldSetFlags()[1] ? this.noCertificadoSAT : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.UUID = fieldSetFlags()[2] ? this.UUID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
