/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.praxis.maki.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Comprobante\",\"namespace\":\"com.praxis.maki.model\",\"fields\":[{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"moneda\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double total;
  @Deprecated public java.lang.CharSequence moneda;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Comprobante() {}

  /**
   * All-args constructor.
   */
  public Comprobante(java.lang.Double total, java.lang.CharSequence moneda) {
    this.total = total;
    this.moneda = moneda;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return moneda;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Double)value$; break;
    case 1: moneda = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Double getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'moneda' field.
   */
  public java.lang.CharSequence getMoneda() {
    return moneda;
  }

  /**
   * Sets the value of the 'moneda' field.
   * @param value the value to set.
   */
  public void setMoneda(java.lang.CharSequence value) {
    this.moneda = value;
  }

  /** Creates a new Comprobante RecordBuilder */
  public static com.praxis.maki.model.Comprobante.Builder newBuilder() {
    return new com.praxis.maki.model.Comprobante.Builder();
  }
  
  /** Creates a new Comprobante RecordBuilder by copying an existing Builder */
  public static com.praxis.maki.model.Comprobante.Builder newBuilder(com.praxis.maki.model.Comprobante.Builder other) {
    return new com.praxis.maki.model.Comprobante.Builder(other);
  }
  
  /** Creates a new Comprobante RecordBuilder by copying an existing Comprobante instance */
  public static com.praxis.maki.model.Comprobante.Builder newBuilder(com.praxis.maki.model.Comprobante other) {
    return new com.praxis.maki.model.Comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for Comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Comprobante>
    implements org.apache.avro.data.RecordBuilder<Comprobante> {

    private double total;
    private java.lang.CharSequence moneda;

    /** Creates a new Builder */
    private Builder() {
      super(com.praxis.maki.model.Comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.praxis.maki.model.Comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.moneda)) {
        this.moneda = data().deepCopy(fields()[1].schema(), other.moneda);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Comprobante instance */
    private Builder(com.praxis.maki.model.Comprobante other) {
            super(com.praxis.maki.model.Comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.moneda)) {
        this.moneda = data().deepCopy(fields()[1].schema(), other.moneda);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'total' field */
    public java.lang.Double getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public com.praxis.maki.model.Comprobante.Builder setTotal(double value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'total' field */
    public com.praxis.maki.model.Comprobante.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'moneda' field */
    public java.lang.CharSequence getMoneda() {
      return moneda;
    }
    
    /** Sets the value of the 'moneda' field */
    public com.praxis.maki.model.Comprobante.Builder setMoneda(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.moneda = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'moneda' field has been set */
    public boolean hasMoneda() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'moneda' field */
    public com.praxis.maki.model.Comprobante.Builder clearMoneda() {
      moneda = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Comprobante build() {
      try {
        Comprobante record = new Comprobante();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Double) defaultValue(fields()[0]);
        record.moneda = fieldSetFlags()[1] ? this.moneda : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
