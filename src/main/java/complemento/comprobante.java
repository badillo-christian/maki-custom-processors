/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package complemento;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"complemento\",\"fields\":[{\"name\":\"timbreFiscalDigital\",\"type\":{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"timbreFiscalDigital.complemento\",\"fields\":[{\"name\":\"fechaTimbrado\",\"type\":\"string\"},{\"name\":\"noCertificadoSAT\",\"type\":\"string\"},{\"name\":\"UUID\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public timbreFiscalDigital.complemento.comprobante timbreFiscalDigital;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public comprobante() {}

  /**
   * All-args constructor.
   */
  public comprobante(timbreFiscalDigital.complemento.comprobante timbreFiscalDigital) {
    this.timbreFiscalDigital = timbreFiscalDigital;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timbreFiscalDigital;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timbreFiscalDigital = (timbreFiscalDigital.complemento.comprobante)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timbreFiscalDigital' field.
   */
  public timbreFiscalDigital.complemento.comprobante getTimbreFiscalDigital() {
    return timbreFiscalDigital;
  }

  /**
   * Sets the value of the 'timbreFiscalDigital' field.
   * @param value the value to set.
   */
  public void setTimbreFiscalDigital(timbreFiscalDigital.complemento.comprobante value) {
    this.timbreFiscalDigital = value;
  }

  /** Creates a new comprobante RecordBuilder */
  public static complemento.comprobante.Builder newBuilder() {
    return new complemento.comprobante.Builder();
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing Builder */
  public static complemento.comprobante.Builder newBuilder(complemento.comprobante.Builder other) {
    return new complemento.comprobante.Builder(other);
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing comprobante instance */
  public static complemento.comprobante.Builder newBuilder(complemento.comprobante other) {
    return new complemento.comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<comprobante>
    implements org.apache.avro.data.RecordBuilder<comprobante> {

    private timbreFiscalDigital.complemento.comprobante timbreFiscalDigital;

    /** Creates a new Builder */
    private Builder() {
      super(complemento.comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(complemento.comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timbreFiscalDigital)) {
        this.timbreFiscalDigital = data().deepCopy(fields()[0].schema(), other.timbreFiscalDigital);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing comprobante instance */
    private Builder(complemento.comprobante other) {
            super(complemento.comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.timbreFiscalDigital)) {
        this.timbreFiscalDigital = data().deepCopy(fields()[0].schema(), other.timbreFiscalDigital);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'timbreFiscalDigital' field */
    public timbreFiscalDigital.complemento.comprobante getTimbreFiscalDigital() {
      return timbreFiscalDigital;
    }
    
    /** Sets the value of the 'timbreFiscalDigital' field */
    public complemento.comprobante.Builder setTimbreFiscalDigital(timbreFiscalDigital.complemento.comprobante value) {
      validate(fields()[0], value);
      this.timbreFiscalDigital = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'timbreFiscalDigital' field has been set */
    public boolean hasTimbreFiscalDigital() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'timbreFiscalDigital' field */
    public complemento.comprobante.Builder clearTimbreFiscalDigital() {
      timbreFiscalDigital = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public comprobante build() {
      try {
        comprobante record = new comprobante();
        record.timbreFiscalDigital = fieldSetFlags()[0] ? this.timbreFiscalDigital : (timbreFiscalDigital.complemento.comprobante) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
