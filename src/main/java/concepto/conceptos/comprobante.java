/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package concepto.conceptos;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"concepto.conceptos\",\"fields\":[{\"name\":\"descripcion\",\"type\":\"string\"},{\"name\":\"unidad\",\"type\":\"string\"},{\"name\":\"cantidad\",\"type\":\"int\"},{\"name\":\"complementoConcepto\",\"type\":\"string\"},{\"name\":\"importe\",\"type\":\"double\"},{\"name\":\"valorUnitario\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence descripcion;
  @Deprecated public java.lang.CharSequence unidad;
  @Deprecated public int cantidad;
  @Deprecated public java.lang.CharSequence complementoConcepto;
  @Deprecated public double importe;
  @Deprecated public double valorUnitario;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public comprobante() {}

  /**
   * All-args constructor.
   */
  public comprobante(java.lang.CharSequence descripcion, java.lang.CharSequence unidad, java.lang.Integer cantidad, java.lang.CharSequence complementoConcepto, java.lang.Double importe, java.lang.Double valorUnitario) {
    this.descripcion = descripcion;
    this.unidad = unidad;
    this.cantidad = cantidad;
    this.complementoConcepto = complementoConcepto;
    this.importe = importe;
    this.valorUnitario = valorUnitario;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return descripcion;
    case 1: return unidad;
    case 2: return cantidad;
    case 3: return complementoConcepto;
    case 4: return importe;
    case 5: return valorUnitario;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: descripcion = (java.lang.CharSequence)value$; break;
    case 1: unidad = (java.lang.CharSequence)value$; break;
    case 2: cantidad = (java.lang.Integer)value$; break;
    case 3: complementoConcepto = (java.lang.CharSequence)value$; break;
    case 4: importe = (java.lang.Double)value$; break;
    case 5: valorUnitario = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'descripcion' field.
   */
  public java.lang.CharSequence getDescripcion() {
    return descripcion;
  }

  /**
   * Sets the value of the 'descripcion' field.
   * @param value the value to set.
   */
  public void setDescripcion(java.lang.CharSequence value) {
    this.descripcion = value;
  }

  /**
   * Gets the value of the 'unidad' field.
   */
  public java.lang.CharSequence getUnidad() {
    return unidad;
  }

  /**
   * Sets the value of the 'unidad' field.
   * @param value the value to set.
   */
  public void setUnidad(java.lang.CharSequence value) {
    this.unidad = value;
  }

  /**
   * Gets the value of the 'cantidad' field.
   */
  public java.lang.Integer getCantidad() {
    return cantidad;
  }

  /**
   * Sets the value of the 'cantidad' field.
   * @param value the value to set.
   */
  public void setCantidad(java.lang.Integer value) {
    this.cantidad = value;
  }

  /**
   * Gets the value of the 'complementoConcepto' field.
   */
  public java.lang.CharSequence getComplementoConcepto() {
    return complementoConcepto;
  }

  /**
   * Sets the value of the 'complementoConcepto' field.
   * @param value the value to set.
   */
  public void setComplementoConcepto(java.lang.CharSequence value) {
    this.complementoConcepto = value;
  }

  /**
   * Gets the value of the 'importe' field.
   */
  public java.lang.Double getImporte() {
    return importe;
  }

  /**
   * Sets the value of the 'importe' field.
   * @param value the value to set.
   */
  public void setImporte(java.lang.Double value) {
    this.importe = value;
  }

  /**
   * Gets the value of the 'valorUnitario' field.
   */
  public java.lang.Double getValorUnitario() {
    return valorUnitario;
  }

  /**
   * Sets the value of the 'valorUnitario' field.
   * @param value the value to set.
   */
  public void setValorUnitario(java.lang.Double value) {
    this.valorUnitario = value;
  }

  /** Creates a new comprobante RecordBuilder */
  public static concepto.conceptos.comprobante.Builder newBuilder() {
    return new concepto.conceptos.comprobante.Builder();
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing Builder */
  public static concepto.conceptos.comprobante.Builder newBuilder(concepto.conceptos.comprobante.Builder other) {
    return new concepto.conceptos.comprobante.Builder(other);
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing comprobante instance */
  public static concepto.conceptos.comprobante.Builder newBuilder(concepto.conceptos.comprobante other) {
    return new concepto.conceptos.comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<comprobante>
    implements org.apache.avro.data.RecordBuilder<comprobante> {

    private java.lang.CharSequence descripcion;
    private java.lang.CharSequence unidad;
    private int cantidad;
    private java.lang.CharSequence complementoConcepto;
    private double importe;
    private double valorUnitario;

    /** Creates a new Builder */
    private Builder() {
      super(concepto.conceptos.comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(concepto.conceptos.comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.descripcion)) {
        this.descripcion = data().deepCopy(fields()[0].schema(), other.descripcion);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unidad)) {
        this.unidad = data().deepCopy(fields()[1].schema(), other.unidad);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cantidad)) {
        this.cantidad = data().deepCopy(fields()[2].schema(), other.cantidad);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.complementoConcepto)) {
        this.complementoConcepto = data().deepCopy(fields()[3].schema(), other.complementoConcepto);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.importe)) {
        this.importe = data().deepCopy(fields()[4].schema(), other.importe);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valorUnitario)) {
        this.valorUnitario = data().deepCopy(fields()[5].schema(), other.valorUnitario);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing comprobante instance */
    private Builder(concepto.conceptos.comprobante other) {
            super(concepto.conceptos.comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.descripcion)) {
        this.descripcion = data().deepCopy(fields()[0].schema(), other.descripcion);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unidad)) {
        this.unidad = data().deepCopy(fields()[1].schema(), other.unidad);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cantidad)) {
        this.cantidad = data().deepCopy(fields()[2].schema(), other.cantidad);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.complementoConcepto)) {
        this.complementoConcepto = data().deepCopy(fields()[3].schema(), other.complementoConcepto);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.importe)) {
        this.importe = data().deepCopy(fields()[4].schema(), other.importe);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valorUnitario)) {
        this.valorUnitario = data().deepCopy(fields()[5].schema(), other.valorUnitario);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'descripcion' field */
    public java.lang.CharSequence getDescripcion() {
      return descripcion;
    }
    
    /** Sets the value of the 'descripcion' field */
    public concepto.conceptos.comprobante.Builder setDescripcion(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.descripcion = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'descripcion' field has been set */
    public boolean hasDescripcion() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'descripcion' field */
    public concepto.conceptos.comprobante.Builder clearDescripcion() {
      descripcion = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'unidad' field */
    public java.lang.CharSequence getUnidad() {
      return unidad;
    }
    
    /** Sets the value of the 'unidad' field */
    public concepto.conceptos.comprobante.Builder setUnidad(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.unidad = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'unidad' field has been set */
    public boolean hasUnidad() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'unidad' field */
    public concepto.conceptos.comprobante.Builder clearUnidad() {
      unidad = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'cantidad' field */
    public java.lang.Integer getCantidad() {
      return cantidad;
    }
    
    /** Sets the value of the 'cantidad' field */
    public concepto.conceptos.comprobante.Builder setCantidad(int value) {
      validate(fields()[2], value);
      this.cantidad = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'cantidad' field has been set */
    public boolean hasCantidad() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'cantidad' field */
    public concepto.conceptos.comprobante.Builder clearCantidad() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'complementoConcepto' field */
    public java.lang.CharSequence getComplementoConcepto() {
      return complementoConcepto;
    }
    
    /** Sets the value of the 'complementoConcepto' field */
    public concepto.conceptos.comprobante.Builder setComplementoConcepto(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.complementoConcepto = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'complementoConcepto' field has been set */
    public boolean hasComplementoConcepto() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'complementoConcepto' field */
    public concepto.conceptos.comprobante.Builder clearComplementoConcepto() {
      complementoConcepto = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'importe' field */
    public java.lang.Double getImporte() {
      return importe;
    }
    
    /** Sets the value of the 'importe' field */
    public concepto.conceptos.comprobante.Builder setImporte(double value) {
      validate(fields()[4], value);
      this.importe = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'importe' field has been set */
    public boolean hasImporte() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'importe' field */
    public concepto.conceptos.comprobante.Builder clearImporte() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'valorUnitario' field */
    public java.lang.Double getValorUnitario() {
      return valorUnitario;
    }
    
    /** Sets the value of the 'valorUnitario' field */
    public concepto.conceptos.comprobante.Builder setValorUnitario(double value) {
      validate(fields()[5], value);
      this.valorUnitario = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'valorUnitario' field has been set */
    public boolean hasValorUnitario() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'valorUnitario' field */
    public concepto.conceptos.comprobante.Builder clearValorUnitario() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public comprobante build() {
      try {
        comprobante record = new comprobante();
        record.descripcion = fieldSetFlags()[0] ? this.descripcion : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.unidad = fieldSetFlags()[1] ? this.unidad : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.cantidad = fieldSetFlags()[2] ? this.cantidad : (java.lang.Integer) defaultValue(fields()[2]);
        record.complementoConcepto = fieldSetFlags()[3] ? this.complementoConcepto : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.importe = fieldSetFlags()[4] ? this.importe : (java.lang.Double) defaultValue(fields()[4]);
        record.valorUnitario = fieldSetFlags()[5] ? this.valorUnitario : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
