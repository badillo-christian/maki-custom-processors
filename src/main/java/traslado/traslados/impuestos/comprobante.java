/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package traslado.traslados.impuestos;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"traslado.traslados.impuestos\",\"fields\":[{\"name\":\"impuesto\",\"type\":\"string\"},{\"name\":\"tasa\",\"type\":\"int\"},{\"name\":\"importe\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence impuesto;
  @Deprecated public int tasa;
  @Deprecated public double importe;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public comprobante() {}

  /**
   * All-args constructor.
   */
  public comprobante(java.lang.CharSequence impuesto, java.lang.Integer tasa, java.lang.Double importe) {
    this.impuesto = impuesto;
    this.tasa = tasa;
    this.importe = importe;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return impuesto;
    case 1: return tasa;
    case 2: return importe;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: impuesto = (java.lang.CharSequence)value$; break;
    case 1: tasa = (java.lang.Integer)value$; break;
    case 2: importe = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'impuesto' field.
   */
  public java.lang.CharSequence getImpuesto() {
    return impuesto;
  }

  /**
   * Sets the value of the 'impuesto' field.
   * @param value the value to set.
   */
  public void setImpuesto(java.lang.CharSequence value) {
    this.impuesto = value;
  }

  /**
   * Gets the value of the 'tasa' field.
   */
  public java.lang.Integer getTasa() {
    return tasa;
  }

  /**
   * Sets the value of the 'tasa' field.
   * @param value the value to set.
   */
  public void setTasa(java.lang.Integer value) {
    this.tasa = value;
  }

  /**
   * Gets the value of the 'importe' field.
   */
  public java.lang.Double getImporte() {
    return importe;
  }

  /**
   * Sets the value of the 'importe' field.
   * @param value the value to set.
   */
  public void setImporte(java.lang.Double value) {
    this.importe = value;
  }

  /** Creates a new comprobante RecordBuilder */
  public static traslado.traslados.impuestos.comprobante.Builder newBuilder() {
    return new traslado.traslados.impuestos.comprobante.Builder();
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing Builder */
  public static traslado.traslados.impuestos.comprobante.Builder newBuilder(traslado.traslados.impuestos.comprobante.Builder other) {
    return new traslado.traslados.impuestos.comprobante.Builder(other);
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing comprobante instance */
  public static traslado.traslados.impuestos.comprobante.Builder newBuilder(traslado.traslados.impuestos.comprobante other) {
    return new traslado.traslados.impuestos.comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<comprobante>
    implements org.apache.avro.data.RecordBuilder<comprobante> {

    private java.lang.CharSequence impuesto;
    private int tasa;
    private double importe;

    /** Creates a new Builder */
    private Builder() {
      super(traslado.traslados.impuestos.comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(traslado.traslados.impuestos.comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.impuesto)) {
        this.impuesto = data().deepCopy(fields()[0].schema(), other.impuesto);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tasa)) {
        this.tasa = data().deepCopy(fields()[1].schema(), other.tasa);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.importe)) {
        this.importe = data().deepCopy(fields()[2].schema(), other.importe);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing comprobante instance */
    private Builder(traslado.traslados.impuestos.comprobante other) {
            super(traslado.traslados.impuestos.comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.impuesto)) {
        this.impuesto = data().deepCopy(fields()[0].schema(), other.impuesto);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tasa)) {
        this.tasa = data().deepCopy(fields()[1].schema(), other.tasa);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.importe)) {
        this.importe = data().deepCopy(fields()[2].schema(), other.importe);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'impuesto' field */
    public java.lang.CharSequence getImpuesto() {
      return impuesto;
    }
    
    /** Sets the value of the 'impuesto' field */
    public traslado.traslados.impuestos.comprobante.Builder setImpuesto(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.impuesto = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'impuesto' field has been set */
    public boolean hasImpuesto() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'impuesto' field */
    public traslado.traslados.impuestos.comprobante.Builder clearImpuesto() {
      impuesto = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tasa' field */
    public java.lang.Integer getTasa() {
      return tasa;
    }
    
    /** Sets the value of the 'tasa' field */
    public traslado.traslados.impuestos.comprobante.Builder setTasa(int value) {
      validate(fields()[1], value);
      this.tasa = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tasa' field has been set */
    public boolean hasTasa() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tasa' field */
    public traslado.traslados.impuestos.comprobante.Builder clearTasa() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'importe' field */
    public java.lang.Double getImporte() {
      return importe;
    }
    
    /** Sets the value of the 'importe' field */
    public traslado.traslados.impuestos.comprobante.Builder setImporte(double value) {
      validate(fields()[2], value);
      this.importe = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'importe' field has been set */
    public boolean hasImporte() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'importe' field */
    public traslado.traslados.impuestos.comprobante.Builder clearImporte() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public comprobante build() {
      try {
        comprobante record = new comprobante();
        record.impuesto = fieldSetFlags()[0] ? this.impuesto : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tasa = fieldSetFlags()[1] ? this.tasa : (java.lang.Integer) defaultValue(fields()[1]);
        record.importe = fieldSetFlags()[2] ? this.importe : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
