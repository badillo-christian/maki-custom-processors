/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package receptor;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class comprobante extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"receptor\",\"fields\":[{\"name\":\"domicilio\",\"type\":{\"type\":\"record\",\"name\":\"comprobante\",\"namespace\":\"domicilio.receptor\",\"fields\":[{\"name\":\"noExterior\",\"type\":\"int\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"municipio\",\"type\":\"string\"},{\"name\":\"calle\",\"type\":\"string\"},{\"name\":\"pais\",\"type\":\"string\"}]}},{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"rfc\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public domicilio.receptor.comprobante domicilio;
  @Deprecated public java.lang.CharSequence nombre;
  @Deprecated public java.lang.CharSequence rfc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public comprobante() {}

  /**
   * All-args constructor.
   */
  public comprobante(domicilio.receptor.comprobante domicilio, java.lang.CharSequence nombre, java.lang.CharSequence rfc) {
    this.domicilio = domicilio;
    this.nombre = nombre;
    this.rfc = rfc;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return domicilio;
    case 1: return nombre;
    case 2: return rfc;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: domicilio = (domicilio.receptor.comprobante)value$; break;
    case 1: nombre = (java.lang.CharSequence)value$; break;
    case 2: rfc = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'domicilio' field.
   */
  public domicilio.receptor.comprobante getDomicilio() {
    return domicilio;
  }

  /**
   * Sets the value of the 'domicilio' field.
   * @param value the value to set.
   */
  public void setDomicilio(domicilio.receptor.comprobante value) {
    this.domicilio = value;
  }

  /**
   * Gets the value of the 'nombre' field.
   */
  public java.lang.CharSequence getNombre() {
    return nombre;
  }

  /**
   * Sets the value of the 'nombre' field.
   * @param value the value to set.
   */
  public void setNombre(java.lang.CharSequence value) {
    this.nombre = value;
  }

  /**
   * Gets the value of the 'rfc' field.
   */
  public java.lang.CharSequence getRfc() {
    return rfc;
  }

  /**
   * Sets the value of the 'rfc' field.
   * @param value the value to set.
   */
  public void setRfc(java.lang.CharSequence value) {
    this.rfc = value;
  }

  /** Creates a new comprobante RecordBuilder */
  public static receptor.comprobante.Builder newBuilder() {
    return new receptor.comprobante.Builder();
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing Builder */
  public static receptor.comprobante.Builder newBuilder(receptor.comprobante.Builder other) {
    return new receptor.comprobante.Builder(other);
  }
  
  /** Creates a new comprobante RecordBuilder by copying an existing comprobante instance */
  public static receptor.comprobante.Builder newBuilder(receptor.comprobante other) {
    return new receptor.comprobante.Builder(other);
  }
  
  /**
   * RecordBuilder for comprobante instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<comprobante>
    implements org.apache.avro.data.RecordBuilder<comprobante> {

    private domicilio.receptor.comprobante domicilio;
    private java.lang.CharSequence nombre;
    private java.lang.CharSequence rfc;

    /** Creates a new Builder */
    private Builder() {
      super(receptor.comprobante.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(receptor.comprobante.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.domicilio)) {
        this.domicilio = data().deepCopy(fields()[0].schema(), other.domicilio);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nombre)) {
        this.nombre = data().deepCopy(fields()[1].schema(), other.nombre);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rfc)) {
        this.rfc = data().deepCopy(fields()[2].schema(), other.rfc);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing comprobante instance */
    private Builder(receptor.comprobante other) {
            super(receptor.comprobante.SCHEMA$);
      if (isValidValue(fields()[0], other.domicilio)) {
        this.domicilio = data().deepCopy(fields()[0].schema(), other.domicilio);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nombre)) {
        this.nombre = data().deepCopy(fields()[1].schema(), other.nombre);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rfc)) {
        this.rfc = data().deepCopy(fields()[2].schema(), other.rfc);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'domicilio' field */
    public domicilio.receptor.comprobante getDomicilio() {
      return domicilio;
    }
    
    /** Sets the value of the 'domicilio' field */
    public receptor.comprobante.Builder setDomicilio(domicilio.receptor.comprobante value) {
      validate(fields()[0], value);
      this.domicilio = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'domicilio' field has been set */
    public boolean hasDomicilio() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'domicilio' field */
    public receptor.comprobante.Builder clearDomicilio() {
      domicilio = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nombre' field */
    public java.lang.CharSequence getNombre() {
      return nombre;
    }
    
    /** Sets the value of the 'nombre' field */
    public receptor.comprobante.Builder setNombre(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nombre = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nombre' field has been set */
    public boolean hasNombre() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nombre' field */
    public receptor.comprobante.Builder clearNombre() {
      nombre = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'rfc' field */
    public java.lang.CharSequence getRfc() {
      return rfc;
    }
    
    /** Sets the value of the 'rfc' field */
    public receptor.comprobante.Builder setRfc(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.rfc = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'rfc' field has been set */
    public boolean hasRfc() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'rfc' field */
    public receptor.comprobante.Builder clearRfc() {
      rfc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public comprobante build() {
      try {
        comprobante record = new comprobante();
        record.domicilio = fieldSetFlags()[0] ? this.domicilio : (domicilio.receptor.comprobante) defaultValue(fields()[0]);
        record.nombre = fieldSetFlags()[1] ? this.nombre : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.rfc = fieldSetFlags()[2] ? this.rfc : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
